{
  
    
        "post0": {
            "title": "data engineering zoomcamp week 1 practise",
            "content": "data engineering zoomcamp week 1 practise . concepts and technology . Data Lake &amp; Data Warehouse | Terraform Iac | Docker &amp; Docker-compose | SQL: Data Analysis &amp; Exploration | Airflow: Pipline Orchestration | DBT: data Transformation | parquet | . Practise . 1 setup local environment . ref this guide . 1). install docker and docker-compose 2). install pgcli . sudo apt-get install libpq-dev python3-dev python3-venv mkdir zoomcamp cd zoomcamp &amp; python3 -m venv .venv source .venv/bin/activate pip install pip -U pip install pgcli . 2. run Postgres in docker . . $ bash pg.sh The files belonging to this database system will be owned by user &quot;postgres&quot;. This user must also own the server process. The database cluster will be initialized with locale &quot;en_US.utf8&quot;. The default database encoding has accordingly been set to &quot;UTF8&quot;. The default text search configuration will be set to &quot;english&quot;. Data page checksums are disabled. fixing permissions on existing directory /var/lib/postgresql/data ... ok creating subdirectories ... ok selecting dynamic shared memory implementation ... posix selecting default max_connections ... 100 selecting default shared_buffers ... 128MB selecting default time zone ... Etc/UTC creating configuration files ... ok running bootstrap script ... ok performing post-bootstrap initialization ... ok syncing data to disk ... ok initdb: warning: enabling &quot;trust&quot; authentication for local connections You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb. Success. You can now start the database server using: pg_ctl -D /var/lib/postgresql/data -l logfile start waiting for server to start....2022-06-27 07:38:35.587 UTC [49] LOG: starting PostgreSQL 13.5 (Debian 13.5-1.pgdg110+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit 2022-06-27 07:38:35.587 UTC [49] LOG: listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; 2022-06-27 07:38:35.590 UTC [50] LOG: database system was shut down at 2022-06-27 07:38:35 UTC 2022-06-27 07:38:35.595 UTC [49] LOG: database system is ready to accept connections done server started CREATE DATABASE /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/* 2022-06-27 07:38:35.813 UTC [49] LOG: received fast shutdown request waiting for server to shut down....2022-06-27 07:38:35.813 UTC [49] LOG: aborting any active transactions 2022-06-27 07:38:35.815 UTC [49] LOG: background worker &quot;logical replication launcher&quot; (PID 56) exited with exit code 1 2022-06-27 07:38:35.816 UTC [51] LOG: shutting down 2022-06-27 07:38:35.828 UTC [49] LOG: database system is shut down done server stopped PostgreSQL init process complete; ready for start up. 2022-06-27 07:38:35.941 UTC [1] LOG: starting PostgreSQL 13.5 (Debian 13.5-1.pgdg110+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit 2022-06-27 07:38:35.941 UTC [1] LOG: listening on IPv4 address &quot;0.0.0.0&quot;, port 5432 2022-06-27 07:38:35.941 UTC [1] LOG: listening on IPv6 address &quot;::&quot;, port 5432 2022-06-27 07:38:35.942 UTC [1] LOG: listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; 2022-06-27 07:38:35.944 UTC [63] LOG: database system was shut down at 2022-06-27 07:38:35 UTC 2022-06-27 07:38:35.949 UTC [1] LOG: database system is ready to accept connections . connect to postgres using pgcli . pgcli -h localhost -p 5432 -u root -d ny_taxi . . 3. import taxi data to Postgres . install the python packages: . pip install pandas sqlalchemy . download the nyc taxi data . $ wget https://s3.amazonaws.com/nyc-tlc/csv_backup/yellow_tripdata_2021-01.csv .... $ wc -l yellow_tripdata_2021-01.csv 1369770 yellow_tripdata_2021-01.csv . week1/import_data.py . import pandas as pd from sqlalchemy import create_engine # create engine and set the root as postgresql://user:password@host:port/database engine = create_engine(&#39;postgresql://root:root@localhost:5432/ny_taxi&#39;) # build a text iterrator with chunk size 100000 df_iter = pd.read_csv(&#39;yellow_tripdata_2021-01.csv&#39;, iterator=True, chunksize=100000) while True: df = next(df_iter) df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime) df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime) df.to_sql(name=&#39;yellow_taxi_data&#39;, con=engine, if_exists=&#39;append&#39;) . run the scripts, but erros occured: . $ python import_data.py inserted another chunk..., took 8.551 seconds inserted another chunk..., took 8.318 seconds inserted another chunk..., took 8.301 seconds inserted another chunk..., took 8.303 seconds inserted another chunk..., took 8.312 seconds inserted another chunk..., took 8.294 seconds inserted another chunk..., took 8.454 seconds inserted another chunk..., took 8.303 seconds inserted another chunk..., took 8.250 seconds inserted another chunk..., took 8.291 seconds inserted another chunk..., took 8.383 seconds inserted another chunk..., took 8.283 seconds ... . set low_memory=False in read_csv and run again: . logging . login into database and see the nyc taxi data schema: . $ pgcli -h localhost -p 5432 -u root -d ny_taxi $ root@localhost:ny_taxi&gt; d yellow_taxi_data +--+--+--+ | Column | Type | Modifiers | |--+--+--| | index | bigint | | | VendorID | bigint | | | tpep_pickup_datetime | timestamp without time zone | | | tpep_dropoff_datetime | timestamp without time zone | | | passenger_count | bigint | | | trip_distance | double precision | | | RatecodeID | bigint | | | store_and_fwd_flag | text | | | PULocationID | bigint | | | DOLocationID | bigint | | | payment_type | bigint | | | fare_amount | double precision | | | extra | double precision | | | mta_tax | double precision | | | tip_amount | double precision | | | tolls_amount | double precision | | | improvement_surcharge | double precision | | | total_amount | double precision | | | congestion_surcharge | double precision | | | airport_fee | double precision | | +--+--+--+ Indexes: &quot;ix_yellow_taxi_data_index&quot; btree (index) Time: 0.083s &gt; SELECT COUNT(1) FROM yellow_taxi_data; ++ | count | || | 6848845 | ++ SELECT 1 Time: 1.690s (1 second), executed in: 1.675s (1 second) . 4. docker-compose . got error: . $ docker network create pg-network $ docker-compose up -d ERROR: The Compose file &#39;./docker-compose.yaml&#39; is invalid because: Unsupported config option for services: &#39;pgadmin&#39; $ docker-compose -v docker-compose version 1.25.0, build unknown . add version: &#39;3.3&#39; to docker-compose.yaml and run again . $ docker-compose up -d Creating network &quot;week1_default&quot; with the default driver Creating week1_pgdatabase_1 ... done Creating week1_pgadmin_1 ... done . 5. build a simple pipline with docker . docker build -t taxi_ingest:v001 . . Then run the docker. . URL=&quot;http://172.24.208.1:8000/yellow_tripdata_2021-01.csv&quot; $ docker run -it --network=week1_default taxi_ingest:v001 --user=root --password=root --host=pg-database --db=ny_taxi --port=5432 --table_name=yellow_taxi_trips --url=${URL} . Got an error: . sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name &quot;pg-database&quot; to address: Temporary failure in name resolution # need change the postgres host per docke-compose.yaml # use hostname: pgdatabase $ docker run -it --network=week1_default taxi_ingest:v001 --user=root --password=root --host=pgdatabase --db=ny_taxi --port=5432 --table_name=yellow_taxi_trips --url=${URL} inserted another chunk..., took 9.058 seconds inserted another chunk..., took 9.044 seconds inserted another chunk..., took 8.881 seconds inserted another chunk..., took 8.875 seconds inserted another chunk..., took 8.963 seconds . Then access pgAdmin by localhost:8080, username: admin@admin.com, pass:root . . Add a host: pgdatabase, user:root, pass:root. View the table yellow_taxi_data and make a query. . . . Additional Note . When import parquet format into database, there was an error: . import_data.py:13: DtypeWarning: Columns (6) have mixed types. Specify dtype option on import or set low_memory=False. for chunk in df_iter: inserted another chunk..., took 8.111 seconds inserted another chunk..., took 5.250 seconds . The records in the table only has 6848845 rows. TODO Fix error in parquet format. . how to fix column(6) mixed data type? . col(6)=’store_and_fwd_flag’ is char of ‘Y’ OR ‘N’, . 1,2021-01-01 00:30:10.000000,2021-01-01 00:36:12.000000,1,2.1,1,&quot;N&quot;,142,43,2,8,3,0.5,0,0,0.3,11.8,2.5, .",
            "url": "https://farlandliu.github.io/blog/data/2022/06/24/data-camp-week-1.html",
            "relUrl": "/data/2022/06/24/data-camp-week-1.html",
            "date": " • Jun 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://farlandliu.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . config post . hide a post in front matter: set hide:true | set social image | image: images/diagram.png Basic setup . | . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://farlandliu.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://farlandliu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://farlandliu.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}